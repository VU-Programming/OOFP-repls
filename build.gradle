import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'scala'
    id 'idea'
}


test {
    useJUnitPlatform()

}

ext {
    scalaMajorVersion = '2.13'
    scalaVersion = "${scalaMajorVersion}.0"
}


repositories {
    flatDir {
        dirs 'lib'
    }

    mavenCentral()
}

sourceSets.main.scala.srcDirs = ['src']
sourceSets.test.scala.srcDirs = ['test']

dependencies {
    implementation "org.scala-lang:scala-library:${scalaVersion}"
    compile fileTree(include: ['*.jar'], dir: 'lib')
    testImplementation("junit:junit:4.13")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.6.0")
    testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.8"
    compile "org.scalacheck:scalacheck_${scalaMajorVersion}:1.14.3"
}

task zip(type: Zip) {
    group = "prepareZipForSubmit"
    description = "Zip your code for submission to Canvas"

    // To make sure you can always run this task
    outputs.upToDateWhen { false }
    dependsOn build
    from fileTree(dir: 'src/bla')
    include '*/**'

    archiveFileName = 'exercises.zip'
    destinationDir(file("$projectDir"))
}


tasks.withType(Test) {
    group = "verification"
    testLogging {
        events  TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.STANDARD_OUT
    }
}

task spec(dependsOn: ['testClasses'], type: JavaExec) {
  main = 'org.scalatest.tools.Runner'
  args = ['-R', 'build/classes/scala/test', '-f','tests']
  classpath = sourceSets.test.runtimeClasspath
}




